<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
   http://www.springframework.org/schema/beans/spring-beans.xsd
   http://www.springframework.org/schema/context
   http://www.springframework.org/schema/context/spring-context.xsd
   http://www.springframework.org/schema/mvc
   https://www.springframework.org/schema/mvc/spring-mvc.xsd">

    <!--先了解一下springmvc.xml的作用：
        1.拦截请求，我们在web.xml中配置的springmvc的拦截路径是 /，所有请求都会经过springmvc，再到达指定的controller。
        2.过滤，有时我们将springmvc的拦截设置为所有时，所有静态的资源也会被拦截，致使我们的静态资源无法正常获取，这个时候我们就需要对静态资源进行放行。-->


    <!-- 配置SpringMVC -->
    <!-- 1.开启SpringMVC注解驱动 -->
    <mvc:annotation-driven />
    <!-- 2.静态资源默认servlet配置-->
    <mvc:default-servlet-handler/>

    <!-- 3.配置jsp 显示ViewResolver视图解析器，需要配置视图解析器对某些静态资源放行 -->
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="viewClass" value="org.springframework.web.servlet.view.JstlView" />
        <property name="prefix" value="/WEB-INF/jsp/" />
        <property name="suffix" value=".jsp" />
    </bean>

    <!-- 4.扫描web相关的bean -->
    <context:component-scan base-package="com.lin.controller" />

    <!--全局错误信息处理器
    只要实现HandlerExceptionResolver接口就是全局异常处理器
    -->
    <bean class="com.lin.exception.CustomExceptionResolver"/>

    <!--使用annotation-driven 注解驱动，就可以代替 注解映射器 和 注解适配器 的配置-->
    <!--conversion-service 向处理器适配器中注入【自定义的参数绑定组件】。-->
    <!--validator 向处理器适配器，注入 校验器-->
    <mvc:annotation-driven conversion-service="conversionService">
    </mvc:annotation-driven>

    <!--自定义参数绑定组件-->
    <bean id="conversionService" class="org.springframework.format.support.FormattingConversionServiceFactoryBean">
        <!-- 转换器 -->
        <property name="converters">
            <set>
                <!-- 日期类型转换 -->
                <bean class="com.lin.controller.converter.CustomDateConverter"/>
            </set>
        </property>
    </bean>

</beans>